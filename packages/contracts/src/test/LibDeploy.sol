// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { console } from "forge-std/console.sol";

// Solecs 
import { IWorld } from "solecs/interfaces/IWorld.sol";
import { World } from "solecs/World.sol";
import { IComponent } from "solecs/interfaces/IComponent.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";
import { SystemStorage } from "solecs/SystemStorage.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
import { MapConfigComponent, ID as MapConfigComponentID } from "components/MapConfigComponent.sol";
import { CastleOwnableComponent, ID as CastleOwnableComponentID } from "components/CastleOwnableComponent.sol";
import { PositionComponent, ID as PositionComponentID } from "components/PositionComponent.sol";
import { ArmyConfigComponent, ID as ArmyConfigComponentID } from "components/ArmyConfigComponent.sol";
import { ArmyOwnableComponent, ID as ArmyOwnableComponentID } from "components/ArmyOwnableComponent.sol";

// Systems (requires 'systems=...' remapping in project's remappings.txt)
import { InitSystem, ID as InitSystemID } from "systems/InitSystem.sol";
import { CastleSettleSystem, ID as CastleSettleSystemID } from "systems/CastleSettleSystem.sol";
import { ArmySettleSystem, ID as ArmySettleSystemID } from "systems/ArmySettleSystem.sol";


struct DeployResult {
  IWorld world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : IWorld(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      IComponent comp;

      console.log("Deploying MapConfigComponent");
      comp = new MapConfigComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying CastleOwnableComponent");
      comp = new CastleOwnableComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PositionComponent");
      comp = new PositionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ArmyConfigComponent");
      comp = new ArmyConfigComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying ArmyOwnableComponent");
      comp = new ArmyOwnableComponent(address(result.world));
      console.log(address(comp));
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);

    // Call initializer libraries
    if (!_reuseComponents) {
      // Allow initializers to utilize SystemStorage
      SystemStorage.init(result.world, result.world.components());

    }
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    IComponent(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    IWorld world = IWorld(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();

    console.log("Deploying InitSystem");
    system = new InitSystem(world, address(components));
    world.registerSystem(address(system), InitSystemID);
    authorizeWriter(components, MapConfigComponentID, address(system));
    console.log(address(system));

    console.log("Deploying CastleSettleSystem");
    system = new CastleSettleSystem(world, address(components));
    world.registerSystem(address(system), CastleSettleSystemID);
    authorizeWriter(components, CastleOwnableComponentID, address(system));
    authorizeWriter(components, PositionComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ArmySettleSystem");
    system = new ArmySettleSystem(world, address(components));
    world.registerSystem(address(system), ArmySettleSystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, ArmyConfigComponentID, address(system));
    authorizeWriter(components, ArmyOwnableComponentID, address(system));
    console.log(address(system));
  }
}
